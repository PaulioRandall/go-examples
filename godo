#!/bin/bash

# Build script to save me five seconds on building, formatting, & testing.
# I do these actions a lot, sometimes as frequently as every 20 seconds.

set -e
tabs -2

if [[ "$1" == "-noclear" ]]; then
  shift 1
else
  clear
fi

BUILD_DIR="build"
EXE_NAME="go_example"
GO_MAIN="cmd/example.go"
BUILD_FLAGS=""
TEST_TIMEOUT="2s"

printUsage() {
  println "Usage:"
  println "\t" "./godo [-noclear] [help]" "\t" "Show usage"
  println "\t" "./godo [-noclear] doc   " "\t" "Show documentation"
  println "\t" "./godo [-noclear] clean " "\t" "Clean Go caches and build folder"
  println "\t" "./godo [-noclear] build " "\t" "Build -> format"
  println "\t" "./godo [-noclear] test  " "\t" "Build -> format -> test"
  println "\t" "./godo [-noclear] vet   " "\t" "Build -> format -> test -> vet"
  println "\t" "./godo [-noclear] run   " "\t" "Build -> format -> test -> vet -> run"
  println "Option:"
  println "\t" "'-noclear'" "\t" "skips screen clearing"
}

println() {
  for s in "$@"
  do
    printf "$s"
  done

  printf "\n"
}

# Requires two parameters:
# 1. Command to check
# 2. Message if command is not found
checkInstall() {
  # Original author: Remy van Elst
  # https://raymii.org/s/snippets/Bash_Bits_Check_if_command_is_available.html
  command -v "$1" >/dev/null 2>&1
  if [[ $? -ne 0 ]]; then
      echo "$2"
      exit 1
  fi
}

goDoc() {
  println "Documentation......localhost:3000"
  checkInstall "godoc" "Can't find 'godoc', is it installed?"
  godoc -http=:3000 
}

clean() {
  println "Cleaning..."
  rm -r -f "$BUILD_DIR"
}

goClean() {
  clean
  go clean -cache -testcache
}

setup() {
  println "Setup..."
  clean
  checkInstall "go" "Can't find 'go', is it installed?"
  mkdir -p "$BUILD_DIR"
}

goBuild() {
  println "Building..."
  go build -o "$BUILD_DIR/$EXE_NAME" $BUILD_FLAGS "$GO_MAIN"
}

goFmt() {
  println "Formatting..."
  go fmt ./...
}

goTest() {
  println "Testing..."
  go test ./... -timeout "$TEST_TIMEOUT"
}

goVet() {
  println "Vetting..."
  go vet ./...
}

goRun() {
  println "Running..."
  go run "$GO_MAIN" $@
}

if [[ "$1" == "" || "$1" == "help" ]]; then
  printUsage
  exit 0
fi

if [[ "$1" == "doc" ]]; then
  goDoc
  exit 0
fi

if [[ "$1" == "clean" ]]; then
  goClean
  exit 0
fi

if [[ "$1" == "build" ]]; then
  setup
  goBuild
  goFmt
  exit 0
fi

if [[ "$1" == "test" ]]; then
  setup
  goBuild
  goFmt
  goTest
  exit 0
fi

if [[ "$1" == "vet" ]]; then
  setup
  goBuild
  goFmt
  goTest
  goVet
  exit 0
fi

if [[ "$1" == "run" ]]; then
  setup
  goBuild
  goFmt
  goTest
  goVet

  shift 1
  goRun $@

  println
  exit 0
fi

println "I don't understand the option '$1'."
printUsage
exit 1
